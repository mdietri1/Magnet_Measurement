{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT5S",
    "scopeConfigs": {
        "ScopeConfigHMI": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
    &lt;CSVProperties&gt;
    &lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>742619e9-555c-4281-ab6e-1287b62fe36f</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>false</KeepPreviousExports>
  <KeepPreviousImageExports>false</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="eea08d5f-333d-4c7d-a861-64649cef1742" LastFocused="133462532021035998" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="4e13b881-8a56-4a31-9dde-9670f0709eb7" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="4e13b881-8a56-4a31-9dde-9670f0709eb7" Collapsed="0" SelectedControl="eea08d5f-333d-4c7d-a861-64649cef1742"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="eea08d5f-333d-4c7d-a861-64649cef1742" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>6000000000</RecordTime>
  <ServerVersions>
    <Version>4.48.16.0</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>AutoStop</StopMode>
  <SubMember>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>882c30f2-eabb-4268-b9f7-6b592928be0b</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>TriggerModule_4</Title>
    </TriggerModule>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-13816528</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-921103</ForeColor>
      <Guid>eea08d5f-333d-4c7d-a861-64649cef1742</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>YT Chart</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>1e0b62f4-f768-438b-ae4e-2203043ebb45</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>fa926117-aad0-4fc1-8b1f-68402745ae86</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_10</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>1ea1cea5-280e-4cf1-aed8-5ac752818df7</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_12</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_8</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-14342874</DisplayColor>
          <ForeColor>-921103</ForeColor>
          <Guid>87b0f5b0-03b5-48b8-9d5c-dba1abb69ab3</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_13</Title>
        </OverviewChart>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-14342874</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>74430ec4-7033-47b9-963a-ee3a29d33352</Guid>
          <Name>Axis Group</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>188b30d2-5297-4bd9-806e-220207e63653</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-921103</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-921103</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>7c5342aa-c7dd-42be-a8e8-e4df0de001e9</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_20</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>137839f3-1bea-4e7e-8462-4bb2dbea39df</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-921103</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-921103</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>14aa4307-2de9-4605-be52-7937d74f8504</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_20</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>fdaab9d4-8c4c-4a90-bb97-9008d0d69bf2</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_25</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>7010c03d-71bf-4497-9efb-45d611a21272</Guid>
              <Name>power_prime</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>71de10d4-bbc0-440e-9cc1-49dad6dc3acc</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>c17bae6d-ab97-4e8e-a0dd-a42c51f0f717</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_31</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>4b547217-9029-4a77-9b1a-32012c7a3937</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_32</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>5175f27c-cc86-46c2-bb3b-0b0acc5e147c</Guid>
                      <Name>TimeShiftStyle_33</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_33</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_29</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>c312af1b-bd5c-4206-85d6-bdab6a66954f</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>745b6493-788a-4e3c-9481-edbb970a16b9</Guid>
                  <Name>Y: power_prime</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>3346</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>W</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>3346</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>3346</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText>W (Power) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol>W</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Power</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>3346</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_35</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
              </SubMember>
              <Title>Channel_27</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16776961</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>ea739fb5-d69c-4746-a109-c6e4b116e67a</Guid>
              <Name>power_secondary</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>83e9a6b5-8b25-4677-a9af-cd7f13cb07d8</Guid>
                  <Name>Channel Style (1)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16776961</DisplayColor>
                      <FillColor>838861055</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>c69e33ff-5cb6-4423-be26-36c50a7784c3</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16776961</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (1)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_31</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>acc68512-0989-486f-96e8-1041bf09870b</Guid>
                      <Name>Min/Max Style (1)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_42</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>90a08bfb-1f83-44ac-95d7-a054f0f46f97</Guid>
                      <Name>TimeShiftStyle_43</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_43</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_29</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>1579d89b-df0a-4d91-a6ec-f62ff3ddf791</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>fae6878c-9c0c-4ef1-8841-fe294b7df942</Guid>
                  <Name>Y: power_secondary</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_35</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
              </SubMember>
              <Title>Channel_27</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_6</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>6b5c5b8b-56f7-4f80-b0ce-594baeb71af8</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>192.168.56.1.1.1</AmsNetId>
          <Area>None</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>200000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment>Leistung Primärspule W</Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>1</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>c312af1b-bd5c-4206-85d6-bdab6a66954f</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>413772</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>power_prime</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>3346</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>W</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>3346</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>3346</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText>W (Power) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol>W</Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>Power</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>3346</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Log_Data_Buffer.power_prime</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_37</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>192.168.56.1.1.1</AmsNetId>
          <Area>None</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>200000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment>Leistung Sekundärspule W</Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>2</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>1579d89b-df0a-4d91-a6ec-f62ff3ddf791</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>413776</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>power_secondary</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Log_Data_Buffer.power_secondary</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_37</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>DataPool_38</Title>
    </DataPool>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>ScopeProject_3</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>true</UseFileStore>
  <Version>1.0.0.3</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "../../../Magnet_Measurement/TwinCAT Measurement Project1/ScopeWizard.tcscopex",
            "CONFIG_SOURCE": "file"
        }
    },
    "scopeRecords": []
}