<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Get_Power" Id="{1025fbe5-1567-453c-9968-b618e325114d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Get_Power
VAR
	{ attribute 'no_init'}
	voltage_effective : REAL;
	voltage_frequency : REAL;
	current_effective : REAL;
	current_frequency : REAL;
	power : REAL;
	start_log : BOOL := FALSE;
	stop_log : BOOL := FALSE;
	fb_Start_Log : FB_PLCDBAutoLogEvt (sNetID:='', tTimeout := T#5S);
	fb_starttimer : TON();
	captured_time : TIME;
	sys_time : ULINT;
	// Task time 
    fbGetCurTaskIdx  : GETCURTASKINDEX;
    ncycletime       : UDINT;
	timestamp : REAL := 0.0;
	run_once : BOOL := TRUE;
	state_string : STRING := 'init';
	state_number : INT := 1;
	test_bool : BOOL := FALSE;
	start_record : BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Convert Data AND get the raw data
//voltage_effective := INT_TO_REAL(GVL_IO.gl_voltage_effective_raw)/65535*20; // Measured with an 
//voltage_frequency := 1/(UINT_TO_REAL(GVL_IO.gl_voltage_periode_raw)/1000); //convert ms to s and get Frequency from Period

//current_effective := INT_TO_REAL(GVL_IO.gl_current_effective_raw)/65535*20; // Measured with an 
//current_frequency := 1/(UINT_TO_REAL(GVL_IO.gl_current_periode_raw)/1000); //convert ms to s and get Frequency from Period

// start timing 
//sys_time := F_GetSystemTime(); 
//fb_starttimer();
//timestamp := timestamp + UDINT_TO_REAL(ncycletime);

// get cycle TIME
//fbGetCurTaskIdx();
//ncycletime := _TaskInfo[fbGetCurTaskIdx.index].CycleTime/10000;

// Calculate Power 

//power := voltage_effective * current_effective;
//captured_time := fb_starttimer.ET;

//		IF (start_log = TRUE) THEN
//			IF fb_Start_Log.Start() THEN
//				start_log := FALSE;
//				timestamp := 0;
//				fb_starttimer.IN := TRUE;
//			END_IF	
//		END_IF	
//		// stop logging measruement data to db
//		IF (fb_starttimer.Q = TRUE) THEN
//			IF fb_Start_Log.Stop() THEN
//				stop_log := FALSE;
//				fb_starttimer.IN := FALSE;
//				state_number := 1;
//			END_IF
//		END_IF


//CASE state_number OF
//	1  : // init
//		test_bool:= FALSE;
//		state_string := 'init';
//		//start_log := TRUE;
//		run_once := TRUE;
//		//IF start_record = TRUE THEN
//		//	state_number := 2;
//		//END_IF
//	2: // record
//		test_bool:= FALSE;
//		state_string := 'record';
//		// Write Metadata once before record to db
//		IF run_once = TRUE THEN
//			IF fb_Start_Log.RunOnce(hAutologGrpID := 1, bAll := FALSE) THEN
//			run_once := FALSE; // ...
//			END_IF
//		END_IF
//		// start logging measurement data to db
//		IF (start_log = TRUE) THEN
//			IF fb_Start_Log.Start() THEN
//				start_log := FALSE;
//				timestamp := 0;
//				fb_starttimer.IN := TRUE;
//			END_IF	
//		END_IF	
//		// stop logging measruement data to db
//		IF (fb_starttimer.Q = TRUE) THEN
//			IF fb_Start_Log.Stop() THEN
//				stop_log := FALSE;
//				fb_starttimer.IN := FALSE;
//				state_number := 1;
//			END_IF
//		END_IF
//		//start_record := FALSE;
//	3 : // stop
//		test_bool:= FALSE;
//		state_string := 'stop';
//END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="Get_Power">
      <LineId Id="291" Count="75" />
      <LineId Id="178" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="91" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>