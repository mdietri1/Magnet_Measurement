<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Log_Data_Buffer" Id="{def14632-0ea6-45a1-81df-1b36ed798037}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Log_Data_Buffer
VAR
	//Messvariablen
	voltage_effective_prime : REAL; //Effektivwert Spannung Primärspule umgewandelt auf +-10V
	voltage_frequency_prime : REAL; //Frequenz Primärspule Spannungssignal umgewandelt auf +-10 in Hz
	current_effective_prime : REAL; //Effektivwert Stromstärke Primärspule umgewandelt auf +-10V umgewandelt zu Ampere
	current_frequency_prime : REAL; //Frequenz Primärspule Stromstärkesignal umgewandelt auf +-10 Hz
	voltage_effective_secondary : REAL; //Effektivwert Spannung Sekundärspule umgewandelt auf +-10V
	voltage_frequency_secondary : REAL; //Frequenz Sekundärspule Spannungssignal umgewandelt auf +-10 Hz
	current_effective_secondary : REAL; //Effektivwert Stromstärke Sekundärspule umgewandelt auf +-10V umgewandelt zu Ampere
	current_frequency_secondary : REAL; //Frequenz Sekundärspule Stromstärkesignal umgewandelt auf +-10 Hz
	power_prime : REAL; //Leistung Primärspule W
	power_secondary : REAL; //Leistung Sekundärspule W
    
	fbGetCurTaskIdx  : GETCURTASKINDEX;
    ncycletime       : REAL;
	nState: INT;	
	bRecord : BOOL;
	//for generating timestamp
	fbGetSystemTime1: GetSystemTime;
	dwTimeLoDW: DWORD;
	dwTimeHiDW: DWORD;
	tFileTime: T_FILETIME;
	nTimestamp: REAL;
	//for insert meta data
	fbWriteMetadata : FB_Write_Metadata;
	fb_Start_Log : FB_PLCDBAutoLogEvt (sNetID:='', tTimeout := T#1S);
	write_meta : BOOL;
	write_meta_status : BOOL; 
	write_meta_error : BOOL; 
	meta_data_written_index : INT := 1;
	
	//for insert masur samples
	fbPLCDBCmd: FB_PLCDBCmdEvt(sNetID:= '', tTimeout:= T#19S);
	aPara: ARRAY [0..7] OF ST_ExpParameter;	
	sCmd1: STRING(255);
	sCmd2: STRING(255);
	sCmd: STRING(512); //CONCAT of sCmd1 and sCmd2
	
	//Data buffer for masur data
	aWriteSQL: ARRAY [0..19] OF BOOL;
	stData: ARRAY [0..19,0..99] OF ST_Masurdata;
	
	//buffer index and masur data variables
	nWriteBufferIndex: INT := 0;
	nWriteIndex: INT := 0;
	nSQLIndex: INT := 0;					
	bError: BOOL;
	bTableCreated: BOOL;
	bRecording: BOOL;
	nRecords: INT;
	sTableName: T_MaxString := 'masur';
	nDBID: UDINT := 1;
	timestampp : REAL := 0;
	index : INT := 0;
	id: INT := 1852;
	
	// Eventlogger
	ipTcResult: Tc3_Database.I_TcMessage;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Convert Data and get the raw data
//Primärspule
voltage_effective_prime := UINT_TO_REAL(GVL_IO.gl_voltage_effective_raw_prime)/65535*20; //Map UINT range of 0:65535 to +-10V 
voltage_frequency_prime := 1/(UINT_TO_REAL(GVL_IO.gl_voltage_periode_raw_prime)/1000); //convert ms to S and get Frequency from Period
current_effective_prime := UINT_TO_REAL(GVL_IO.gl_current_effective_raw_prime)/65535*20; //Map UINT range of 0:65535 to +-10V 
current_frequency_prime := 1/(UINT_TO_REAL(GVL_IO.gl_current_periode_raw_prime)/1000); //convert ms to S and get Frequency from Period
power_prime := voltage_effective_prime * current_effective_prime;
//Sekundärspule
voltage_effective_secondary := UINT_TO_REAL(GVL_IO.gl_voltage_effective_raw_secondary)/65535*20; //Map UINT range of 0:65535 to +-10V 
voltage_frequency_secondary := 1/(UINT_TO_REAL(GVL_IO.gl_voltage_periode_raw_secondary)/1000); //convert ms to S and get Frequency from Period
current_effective_secondary := UINT_TO_REAL(GVL_IO.gl_current_effective_raw_secondary)/65535*20; //Map UINT range of 0:65535 to +-10V 
current_frequency_secondary := 1/(UINT_TO_REAL(GVL_IO.gl_current_periode_raw_secondary)/1000); //convert ms to S and get Frequency from Period
power_secondary := voltage_effective_secondary * current_effective_secondary;

fbGetCurTaskIdx();
ncycletime := _TaskInfo[fbGetCurTaskIdx.index].CycleTime/10000;

//Create timestamp
fbGetSystemTime1(timeLoDW=>dwTimeLoDW,timeHiDW=>dwTimeHiDW);
tFileTime.dwLowDateTime := dwTimeLoDW;
tFileTime.dwHighDateTime := dwTimeHiDW;	
MEMCPY(ADR(nTimestamp), ADR(tFileTime), 8);

CASE nState OF
	0://Init
		IF bRecord THEN			
			bError := FALSE;
			bRecording := FALSE;
			nRecords := 0;
			//sTableName := 'Magnet';//CONCAT('tbl_TestSignals_', LINT_TO_STRING(nTimestamp)); //create new tablename
			sCmd1 := CONCAT('INSERT INTO ', sTableName);
			sCmd2 := ' ([id],[time2],[primary_power],[secondary_power],[phase_shift],[frequency],[flux_density],[Meta_id]) VALUES({id},{time2},{primary_power},{secondary_power},{phase_shift},{frequency},{flux_density},{Meta_id});';
			CONCAT2(ADR(sCmd1), ADR(sCmd2), ADR(sCmd), SIZEOF(sCmd));
			
			aPara[0].sParaName:= 'id'; 				aPara[0].nParaSize:= 8; 	aPara[0].eParaType:= E_ExpParameterType.Int32 ;
			aPara[1].sParaName:= 'time2'; 			aPara[1].nParaSize:= 8; 	aPara[1].eParaType:= E_ExpParameterType.Float32 ;		
			aPara[2].sParaName:= 'primary_power';	aPara[2].nParaSize:= 8;		aPara[2].eParaType:= E_ExpParameterType.Float32 ;		
			aPara[3].sParaName:= 'secondary_power';	aPara[3].nParaSize:= 8;		aPara[3].eParaType:= E_ExpParameterType.Float32 ;	
			aPara[4].sParaName:= 'phase_shift';		aPara[4].nParaSize:= 8;		aPara[4].eParaType:= E_ExpParameterType.Float32 ;
			aPara[5].sParaName:= 'frequency';		aPara[5].nParaSize:= 8;		aPara[5].eParaType:= E_ExpParameterType.Float32 ;
			aPara[6].sParaName:= 'flux_density';	aPara[6].nParaSize:= 8;		aPara[6].eParaType:= E_ExpParameterType.Float32 ;
			aPara[7].sParaName:= 'Meta_id';			aPara[7].nParaSize:= 8;		aPara[7].eParaType:= E_ExpParameterType.Int32 ;	
			nWriteBufferIndex := 0;
			nWriteIndex := 0;
			nSQLIndex := 0;	
			nState := 1;
		END_IF
		
	1://Idle
		IF write_meta THEN
			IF meta_data_written_index = 1 THEN
				fb_Start_Log.RunOnce(hAutologGrpID := 1, bAll := TRUE);
				meta_data_written_index := 2;
			ELSE 
				fb_Start_Log.RunOnce(hAutologGrpID := 1, bAll := TRUE);
				fb_Start_Log.RunOnce(hAutologGrpID := 1, bAll := TRUE);
				fb_Start_Log.RunOnce(hAutologGrpID := 1, bAll := TRUE);
			END_IF
			write_meta := FALSE;
			write_meta_status := fb_Start_Log.bBusy;
			write_meta_error := fb_Start_Log.bError;
		END_IF
		
	2://Recording		
		bRecording := TRUE;
		//Fill buffer
		stData[nWriteBufferIndex, nWriteIndex].id := id;
		stData[nWriteBufferIndex, nWriteIndex].time2 := timestampp;
		stData[nWriteBufferIndex, nWriteIndex].primary_power := power_prime;
		stData[nWriteBufferIndex, nWriteIndex].secondary_power := power_secondary;
		stData[nWriteBufferIndex, nWriteIndex].phase_shift := 1.0;
		stData[nWriteBufferIndex, nWriteIndex].frequency := 2.0;
		stData[nWriteBufferIndex, nWriteIndex].flux_density := 3.0;
		stData[nWriteBufferIndex, nWriteIndex].Meta_id := 1;
		timestampp := ncycletime * index;
		index := index + 1;
		id := id + 1;
		//Set buffer index
		nWriteIndex := nWriteIndex + 1;		
		IF nWriteIndex = 100 THEN
			nWriteIndex := 0;
			aWriteSQL[nWriteBufferIndex]:= TRUE;
			nWriteBufferIndex := nWriteBufferIndex + 1;
			
			IF nWriteBufferIndex = 20 THEN
				nWriteBufferIndex := 0;
			END_IF 	
			
			IF aWriteSQL[nWriteBufferIndex] THEN
				nState := 255;
				RETURN;
			END_IF
		END_IF
				
		//Write buffer element (100 samples) to database
		IF aWriteSQL[nSQLIndex] THEN
			ipTcResult := fbPLCDBCmd.ipTcResult;
			IF fbPLCDBCmd.Execute(nDBID, ADR(sCmd), SIZEOF(sCmd), ADR(stData[nSQLIndex,0]), SIZEOF(stData[nSQLIndex,0]) * 100, ADR(aPara), SIZEOF(aPara)) THEN
				IF fbPLCDBCmd.bError THEN					
					nState := 255;
				ELSE
					nRecords := nRecords + 100;
					
					aWriteSQL[nSQLIndex] := FALSE;
					
					nSQLIndex := nSQLIndex + 1;
					IF nSQLIndex = 20 THEN
						nSQLIndex := 0;
					END_IF
					
					IF NOT bRecord THEN
						bRecording := FALSE;
						nState := 0;
					END_IF
				END_IF				
			END_IF
		END_IF
		
	255://Error
		bError := TRUE;
		bRecording := FALSE;
		IF NOT bRecord THEN			
			nState := 0;
		END_IF 
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="Log_Data_Buffer">
      <LineId Id="11" Count="0" />
      <LineId Id="848" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="850" Count="4" />
      <LineId Id="849" Count="0" />
      <LineId Id="855" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="433" Count="4" />
      <LineId Id="113" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="310" Count="3" />
      <LineId Id="315" Count="1" />
      <LineId Id="318" Count="0" />
      <LineId Id="320" Count="1" />
      <LineId Id="323" Count="1" />
      <LineId Id="785" Count="0" />
      <LineId Id="325" Count="1" />
      <LineId Id="432" Count="0" />
      <LineId Id="517" Count="3" />
      <LineId Id="335" Count="2" />
      <LineId Id="339" Count="2" />
      <LineId Id="360" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="717" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="726" Count="1" />
      <LineId Id="725" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="728" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="361" Count="2" />
      <LineId Id="365" Count="0" />
      <LineId Id="784" Count="0" />
      <LineId Id="366" Count="1" />
      <LineId Id="431" Count="0" />
      <LineId Id="521" Count="3" />
      <LineId Id="374" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="375" Count="19" />
      <LineId Id="459" Count="0" />
      <LineId Id="395" Count="23" />
      <LineId Id="420" Count="2" />
      <LineId Id="111" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>